S
# Given mu = (1.5,1.5)'
mu <- c(1.5,1.5)
dim(mu) <- c(2,1)
#Displays mu
mu
# Hotelling T^2 distribution
T_sq <- n*t(xbar-mu)%*%solve(S)%*%(xbar-mu)
# Let n be the the number of rows and p be the number of columns
n <- nrow(x);p <- ncol(x)
# Displays the value of n and p
n
p
# The mean of x1 and x2
x1bar <- mean(x1)
x2bar <- mean(x2)
# Displays the mean vectors of x1 and x2
x1bar
x2bar
# Creates the me
xbar <- cbind(x1bar,x2bar)
# Displays the mean vectors of x1 and x2
dim(xbar) <- c(2,1)
xbar
# rounds to 2 decimal places
xbar <- round(xbar, 2)
xbar
# The variance and covariance
varx1 <- var(x1)
varx2 <- var(x2)
covx1x2 <- cov(x1,x2)
# Displays the variance and covariance
varx1
varx2
covx1x2
# Creates the variance-covariance matrix
S <- cbind(varx1,covx1x2,covx1x2,varx2)
dim(S) <- c(2,2)
S
# rounds to 2 decimal places
S <- round(S,2)
S
# Given mu = (1.5,1.5)'
mu <- c(1.5,1.5)
dim(mu) <- c(2,1)
#Displays mu
mu
# Hotelling T^2 distribution
T_sq <- n*t(xbar-mu)%*%solve(S)%*%(xbar-mu)
# displays the Hotelling T^2 distribution
T_sq
# Critical value
criticalvalue <- ((n-1)*p)/(n-p))*qf(1-0.05,p,n-p)
# Let n be the the number of rows and p be the number of columns
n <- nrow(x);p <- ncol(x)
# Displays the value of n and p
n
p
# The mean of x1 and x2
x1bar <- mean(x1)
x2bar <- mean(x2)
# Displays the mean vectors of x1 and x2
x1bar
x2bar
# Creates the me
xbar <- cbind(x1bar,x2bar)
# Displays the mean vectors of x1 and x2
dim(xbar) <- c(2,1)
xbar
# rounds to 2 decimal places
xbar <- round(xbar, 2)
xbar
# The variance and covariance
varx1 <- var(x1)
varx2 <- var(x2)
covx1x2 <- cov(x1,x2)
# Displays the variance and covariance
varx1
varx2
covx1x2
# Creates the variance-covariance matrix
S <- cbind(varx1,covx1x2,covx1x2,varx2)
dim(S) <- c(2,2)
S
# rounds to 2 decimal places
S <- round(S,2)
S
# Given mu = (1.5,1.5)'
mu <- c(1.5,1.5)
dim(mu) <- c(2,1)
#Displays mu
mu
# Hotelling T^2 distribution
T_sq <- n*t(xbar-mu)%*%solve(S)%*%(xbar-mu)
# displays the Hotelling T^2 distribution
T_sq
# Critical value
criticalvalue <- ((n-1)*p)/(n-p)*qf(1-0.05,p,n-p)
# Displays the Critical value
criticalvalue
# ellipse package
library(ellipse)
# calculates the chi-square of 95%
c_sq<-(((n-1)*p)/(n-p))*qf(1-0.05,p, n-p)
c <- sqrt(c_sq)
# plots the ellipse
plot(ellipse(Sd,centre=dbar,t=c/sqrt(n)),type="l",xlab="delta1",ylab="delta2",â€¢main = "95% Confidence region for the mean difference")
# ellipse package
library(ellipse)
# calculates the chi-square of 95%
c_sq<-(((n-1)*p)/(n-p))*qf(1-0.05,p, n-p)
c <- sqrt(c_sq)
# plots the ellipse
plot(ellipse(Sd,centre=dbar,t=c/sqrt(n)),type="l",xlab="delta1",ylab="delta2",main = "95% Confidence region for the mean difference")
# ellipse package
library(ellipse)
# calculates the chi-square of 95%
c_sq<-(((n-1)*p)/(n-p))*qf(1-0.05,p, n-p)
c <- sqrt(c_sq)
# plots the ellipse
plot(ellipse(S,centre=dbar,t=c/sqrt(n)),type="l",xlab="delta1",ylab="delta2",main = "95% Confidence region for the mean difference")
# ellipse package
library(ellipse)
# calculates the chi-square of 95%
c_sq<-(((n-1)*p)/(n-p))*qf(1-0.05,p, n-p)
c <- sqrt(c_sq)
# plots the ellipse
plot(ellipse(S,centre=xbar,t=c/sqrt(n)),type="l",xlab="delta1",ylab="delta2",main = "95% Confidence region for the mean difference")
points(dbar[1],dbar[2], col="red")
# ellipse package
library(ellipse)
# calculates the chi-square of 95%
c_sq<-(((n-1)*p)/(n-p))*qf(1-0.05,p, n-p)
c <- sqrt(c_sq)
# plots the ellipse
plot(ellipse(S,centre=xbar,t=c/sqrt(n)),type="l",xlab="delta1",ylab="delta2",main = "95% Confidence region for the mean difference")
points(xbar[1],xbar[2], col="red")
points(delta0[1],delta0[2], col="blue")
# ellipse package
library(ellipse)
# calculates the chi-square of 95%
c_sq<-(((n-1)*p)/(n-p))*qf(1-0.05,p, n-p)
c <- sqrt(c_sq)
# plots the ellipse
plot(ellipse(S,centre=xbar,t=c/sqrt(n)),type="l",xlab="delta1",ylab="delta2",main = "95% Confidence region for the mean difference")
points(xbar[1],xbar[2], col="red")
points(mu[1],mu[2], col="blue")
# Let n be the the number of rows and p be the number of columns
n <- nrow(x);p <- ncol(x)
# Displays the value of n and p
n
p
# The mean of x1 and x2
x1bar <- mean(x1)
x2bar <- mean(x2)
# Displays the mean vectors of x1 and x2
x1bar
x2bar
# Creates the me
xbar <- cbind(x1bar,x2bar)
# Displays the mean vectors of x1 and x2
dim(xbar) <- c(2,1)
xbar
# rounds to 2 decimal places
xbar <- round(xbar, 2)
xbar
# The variance and covariance
varx1 <- var(x1)
varx2 <- var(x2)
covx1x2 <- cov(x1,x2)
# Displays the variance and covariance
varx1
varx2
covx1x2
# Creates the variance-covariance matrix
S <- cbind(varx1,covx1x2,covx1x2,varx2)
dim(S) <- c(2,2)
S
# rounds to 2 decimal places
S <- round(S,2)
S
# Given mu = (1.5,1.5)'
mu <- c(1.5,1.5)
dim(mu) <- c(2,1)
#Displays mu
mu
# Hotelling T^2 distribution
T_sq <- n*t(xbar-mu)%*%solve(S)%*%(xbar-mu)
# displays the Hotelling T^2 distribution
T_sq
# Critical value
criticalvalue <- ((n-1)*p)/(n-p)*qf(1-0.05,p,n-p)
# Displays the Critical value
criticalvalue
# Let n be the the number of rows and p be the number of columns
n <- nrow(x);p <- ncol(x)
# Displays the value of n and p
n
p
# The mean of x1 and x2
x1bar <- mean(x1)
x2bar <- mean(x2)
# Displays the mean vectors of x1 and x2
x1bar
x2bar
# Creates the me
xbar <- cbind(x1bar,x2bar)
# Displays the mean vectors of x1 and x2
dim(xbar) <- c(2,1)
xbar
# rounds to 2 decimal places
xbar <- round(xbar, 2)
xbar
# The variance and covariance
varx1 <- var(x1)
varx2 <- var(x2)
covx1x2 <- cov(x1,x2)
# Displays the variance and covariance
varx1
varx2
covx1x2
# Creates the variance-covariance matrix
S <- cbind(varx1,covx1x2,covx1x2,varx2)
dim(S) <- c(2,2)
S
# rounds to 2 decimal places
S <- round(S,2)
S
# Given mu = (1.5,1.5)'
mu <- c(1.5,1.5)
dim(mu) <- c(2,1)
#Displays mu
mu
# Hotelling T^2 distribution
T_sq <- n*t(xbar-mu)%*%solve(S)%*%(xbar-mu)
# displays the Hotelling T^2 distribution
T_sq <- round(T_sq,2)
T_sq
# Critical value
criticalvalue <- ((n-1)*p)/(n-p)*qf(1-0.05,p,n-p)
# Displays the Critical value
criticalvalue <- round(criticalvalue,2)
criticalvalue
# ellipse package
library(ellipse)
# calculates the chi-square of 95%
c_sq<-(((n-1)*p)/(n-p))*qf(1-0.05,p, n-p)
c <- sqrt(c_sq)
# plots the ellipse
plot(ellipse(S,centre=xbar,t=c/sqrt(n)),type="l",xlab="delta1",ylab="delta2",main = "95% Confidence region for the mean difference")
points(xbar[1],xbar[2], col="red")
points(mu[1],mu[2], col="blue")
# calculates the chi-square of 95%
c_sq<-(((n-1)*p)/(n-p))*qf(1-0.05,p, n-p)
c_sq
c <- sqrt(c_sq)
c
#
a <- c(1,1)
# calulates the standard error and displays it
SE <- sqrt((t(a)%*%S%*%a)/n)
SE
# calculates the chi-square of 95%
c_sq<-(((n-1)*p)/(n-p))*qf(1-0.05,p, n-p)
c_sq
c <- sqrt(c_sq)
c
#
a <- c(1,1)
# calulates the standard error and displays it
SE <- sqrt((t(a)%*%S%*%a)/n)
SE
# get a'xbar
aprime_xbar <- t(a)%*%xbar
aprime_xbar
# calculates the chi-square of 95%
c_sq<-(((n-1)*p)/(n-p))*qf(1-0.05,p, n-p)
c_sq
c <- sqrt(c_sq)
c
#
a <- c(1,0)
# calulates the standard error and displays it
SE <- sqrt((t(a)%*%S%*%a)/n)
SE
# gets a'xbar
aprime_xbar <- t(a)%*%xbar
aprime_xbar
# Calculates the upper bound and lower bound for mu1
CI1_LL <- aprime_xbar-c*SE
CI1_UL <- aprime_xbar+c*SE
CI1 <- c(CI1_LL, CI1_UL)
CI1
# calculates the chi-square of 95%
c_sq<-(((n-1)*p)/(n-p))*qf(1-0.05,p, n-p)
c_sq
c <- sqrt(c_sq)
c
# selects mu1
a <- c(1,0)
# calulates the standard error and displays it
SE <- sqrt((t(a)%*%S%*%a)/n)
SE
# gets a'xbar
aprime_xbar <- t(a)%*%xbar
aprime_xbar
# Calculates the upper bound and lower bound for mu1
CI1_LL <- aprime_xbar-c*SE
CI1_UL <- aprime_xbar+c*SE
CI1 <- c(CI1_LL, CI1_UL)
CI1
#selects mu2
b <- c(0,1)
# calulates the standard error and displays it
SE <- sqrt((t(b)%*%S%*%a)/n)
SE
# gets a'xbar
aprime_xbar <- t(b)%*%xbar
aprime_xbar
# Calculates the upper bound and lower bound for mu1
CI2_LL <- aprime_xbar-c*SE
CI2_UL <- aprime_xbar+c*SE
CI2 <- c(CI2_LL, CI2_UL)
CI2
# calculates the chi-square of 95%
c_sq<-(((n-1)*p)/(n-p))*qf(1-0.05,p, n-p)
c_sq
c <- sqrt(c_sq)
c
# selects mu1
a <- c(1,0)
# calulates the standard error and displays it
SE <- sqrt((t(a)%*%S%*%a)/n)
SE
# gets a'xbar
aprime_xbar <- t(a)%*%xbar
aprime_xbar
# Calculates the upper bound and lower bound for mu1
CI1_LL <- aprime_xbar-c*SE
CI1_UL <- aprime_xbar+c*SE
CI1 <- c(CI1_LL, CI1_UL)
CI1 <- round(CI1,2)
CI1
#selects mu2
b <- c(0,1)
# calulates the standard error and displays it
SE <- sqrt((t(b)%*%S%*%a)/n)
SE
# gets a'xbar
aprime_xbar <- t(b)%*%xbar
aprime_xbar
# Calculates the upper bound and lower bound for mu1
CI2_LL <- aprime_xbar-c*SE
CI2_UL <- aprime_xbar+c*SE
CI2 <- c(CI2_LL, CI2_UL)
CI2 <- round(CI2,2)
CI2
setwd("C:/Users/Richard/Desktop/STAD37")
# Reads the data from "a3_profile_data.txt" and sets it to the variable plasma
plasma <- read.table("a3_profile_data.txt", header = T)
# Renames the columns
colnames(plasma) <- c("Group","X1","X2","X3")
# Displays the data frame
plasma
# Creates two different subsets for group 1 and group 2
plasmag1 <- subset(plasma, Group == 1, select = c(Group,X1,X2,X3))
plasmag2 <- subset(plasma, Group == 2, select = c(Group,X1,X2,X3))
# Displays up to the first six entries of both group 1 and group 2
head(plasmag1)
head(plasmag2)
p <- ncol(plasmag1)
n1 <- nrow(plasmag1)
n2 <- nrow(plasmag2)
xbar1 <- colMeans(plasmag1)
xbar1
xbar2 <- colMeans(plasmag2)
xbar2
variable <- c(1,2,3)
plot(Variable,xbar1,col = "red",ylab = "Mean Score" , axes = FALSE, type = "l", ylim = range(c(95,145)))
p <- ncol(plasmag1)
n1 <- nrow(plasmag1)
n2 <- nrow(plasmag2)
xbar1 <- colMeans(plasmag1)
xbar1
xbar2 <- colMeans(plasmag2)
xbar2
variable <- c(1,2,3)
plot(Variable,xbar1,col = "red",ylab = "Mean Score" , axes = FALSE, type = "l", ylim = range(c(95,145)))
variable <- c(1,2,3)
plot(variable,xbar1,col = "red",ylab = "Mean Score" , axes = FALSE, type = "l", ylim = range(c(95,145)))
# Reads the data from "a3_profile_data.txt" and sets it to the variable plasma
plasma <- read.table("a3_profile_data.txt", header = T)
# Renames the columns
colnames(plasma) <- c("Group","X1","X2","X3")
# Displays the data frame
plasma
# Creates two different subsets for group 1 and group 2
plasmag1 <- subset(plasma, Group == 1, select = c(Group,X1,X2,X3))
plasmag2 <- subset(plasma, Group == 2, select = c(Group,X1,X2,X3))
# Displays up to the first six entries of both group 1 and group 2
head(plasmag1)
head(plasmag2)
p <- ncol(plasmag1)
n1 <- nrow(plasmag1)
n2 <- nrow(plasmag2)
xbar1 <- colMeans(plasmag1)
xbar1
xbar2 <- colMeans(plasmag2)
xbar2
variable <- c(1,2,3)
plot(variable,xbar1,col = "red",ylab = "Mean Score" , axes = FALSE, type = "l", ylim = range(c(95,145)))
variable <- c(1,2,3)
plot(variable,xbar1,col = "red",ylab = "Mean Score" , axes = FALSE, type = "l", ylim = range(c(95,145)))
# Reads the data from "a3_profile_data.txt" and sets it to the variable plasma
plasma <- read.table("a3_profile_data.txt", header = T)
# Displays the data frame
plasma
# Creates two different subsets for group 1 and group 2
plasmag1 <- subset(plasma, Group == 1, select = c(Group,X1,X2,X3))
# Reads the data from "a3_profile_data.txt" and sets it to the variable plasma
plasma <- read.table("a3_profile_data.txt", header = T)
# Displays the data frame
plasma
# Creates two different subsets for group 1 and group 2
plasmag1 <- subset(plasma, Group == 1, select = c(Group,x1,x2,x3))
plasmag2 <- subset(plasma, Group == 2, select = c(Group,x1,x2,x3))
# Displays up to the first six entries of both group 1 and group 2
head(plasmag1)
head(plasmag2)
p <- ncol(plasmag1)
n1 <- nrow(plasmag1)
n2 <- nrow(plasmag2)
xbar1 <- colMeans(plasmag1)
xbar1
xbar2 <- colMeans(plasmag2)
xbar2
variable <- c(1,2,3)
plot(variable,xbar1,col = "red",ylab = "Mean Score" , axes = FALSE, type = "l", ylim = range(c(95,145)))
# Reads the data from "a3_profile_data.txt" and sets it to the variable plasma
plasma <- read.table("a3_profile_data.txt", header = T)
# Displays the data frame
plasma
# Creates two different subsets for group 1 and group 2
plasmag1 <- subset(plasma, Group == 1, select = c(x1,x2,x3))
plasmag2 <- subset(plasma, Group == 2, select = c(x1,x2,x3))
# Displays up to the first six entries of both group 1 and group 2
head(plasmag1)
head(plasmag2)
p <- ncol(plasmag1)
n1 <- nrow(plasmag1)
n2 <- nrow(plasmag2)
xbar1 <- colMeans(plasmag1)
xbar1
xbar2 <- colMeans(plasmag2)
xbar2
variable <- c(1,2,3)
plot(variable,xbar1,col = "red",ylab = "Mean Score" , axes = FALSE, type = "l", ylim = range(c(95,145)))
axis(side = 1, at = variable)
axis(side = 2)
lines(variable,xbar,col="blue")
variable <- c(1,2,3)
plot(variable,xbar1,col = "red",ylab = "Mean Score" , axes = FALSE, type = "l", ylim = range(c(95,145)))
axis(side = 1, at = variable)
axis(side = 2)
lines(variable,xbar2,col="blue")
variable <- c(1,2,3)
plot(variable,xbar1,col = "red",ylab = "Mean Score" , axes = FALSE, type = "l", ylim = range(c(95,145)))
axis(side = 1, at = variable)
axis(side = 2)
lines(variable,xbar2,col="blue")
# Calculates the covariance of
S1 <- cov(plasmag1)
S2 <- cov(plasmag2)
S1
S2
Sp <- (1/(n1+n2-2))*((n1-1)*S1+(n2-1)*S2)
C<-matrix(c(-1,1,0,0,-1,1),byrow=TRUE,p-1,p)
# Calculates the variance-covariance of Group 1 and group 2
S1 <- cov(plasmag1)
S2 <- cov(plasmag2)
# Display the variance-covariance of Group 1 and group 2
S1
S2
Sp <- (1/(n1+n2-2))*((n1-1)*S1+(n2-1)*S2)
C<-matrix(c(-1,1,0,0,-1,1),byrow=TRUE,p-1,p)
# Calculates the variance-covariance of Group 1 and group 2
S1 <- cov(plasmag1)
S2 <- cov(plasmag2)
# Display the variance-covariance of Group 1 and group 2
S1
S2
Sp <- (1/(n1+n2-2))*((n1-1)*S1+(n2-1)*S2)
Sp
C<-matrix(c(-1,1,0,0,-1,1),byrow=TRUE,p-1,p)
# Creates the contrast matrix
C<-matrix(c(-1,1,0,0,-1,1),byrow=TRUE,p-1,p)
# Displays the contrast matrix
C
# Sets to 90% confidence
alpha <- 0.05
# Calculates the Hotelling T^2 value
T_sq_parallel <- ((1/n1+1/n2)^(-1))*t(xbar1-
xbar2)%*%t(C)%*%solve(C%*%Sp%*%t(C))%*%C%*%(xbar1-xbar2)
# Displays the Hotelling T^2 value
T_sq_parallel
# Calculates the critcal value for parallel profiles
CritValue_parallel <- (((n1+n2-2)*(p-1))/(n1+n2-p))*qf(1-alpha, p-1, n1+n2-p)
# Displays the critcal value for parallel profiles
CritValue_parallel
# Reads the data from "a3_profile_data.txt" and sets it to the variable plasma
plasma <- read.table("a3_profile_data.txt", header = T)
setwd("C:/Users/Richard/Desktop/STAD37")
